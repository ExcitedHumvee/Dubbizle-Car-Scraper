make a new file called Plan.md
just make a plan
i want to make a simple Client - Server Model to search DB of cars and visualizing/ interating with data
mainly from the frontend, i want to configure filters like model, year range, price range, mileage range etc. and i want 2 grapphs to be shown: price vs mileage and price vs year
the graps will be a scatterplot with a best fitting curved line
when i click on a data point, i want a popup/modal to show the car details and its car history if available

There will be a backend folder
Backend(API Server):
Handles database interactions(Prisma).
Exposes RESTful endpoints for the frontend.
prefer nestjs, there should be swagger to test the endpoints
robust endpoints to filter cars by make, model, year, price range, mileage, etc.



There will be a frontend folder
Provides the user interface(car model selection, graphs, car details popup)
Fetches data from the backend.
Renders the interactive charts.
prefer React
Car Model Selector: A dropdown / select input that allows the user to choose a car model.
When a model is selected, it triggers an API call to fetch the relevant car data.
Graph Container(x2):
Each graph(Price vs Year, Price vs Mileage) will be rendered in its own container.
They will consume the data fetched from the backend.
Car Details Popup / Modal:
When a data point(car) is clicked on a graph, this modal appears.
It displays Car details and its CarHistory if available.
3. Graph Implementation Details:
Scatter Plots: Both "Price vs Year" and "Price vs Mileage" should be scatter plots, as you're plotting individual data points.
Interactive Data Points:
Each point on the scatter plot represents a car.
Use the listingId to uniquely identify each car.
Implement an onClick event handler for each data point.This handler will then open the car details modal and populate it with the relevant Car and CarHistory data.
Regression Line(Best Fitting Curved Line):
You'll need a statistical library to calculate the regression line.
simple - statistics(JavaScript): A lightweight library for basic statistics, including linear regression.
mathjs(JavaScript): More comprehensive mathematical library.
For curved lines(polynomial regression), you might need more advanced libraries or implement the polynomial regression logic yourself(e.g., using least squares method).
Rendering the Line: Once you have the regression line's points, you can render it as a line series on top of your scatter plot using your charting library.
For "curved" or "best fitting" lines that aren't strictly linear, you'd typically look into polynomial regression or LOESS / LOWESS(Locally Estimated Scatterplot Smoothing).Many charting libraries might have built -in support or examples for this.